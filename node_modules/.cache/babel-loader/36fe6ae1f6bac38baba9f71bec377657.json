{"ast":null,"code":"var _jsxFileName = \"/home/ayan/Code/Temp/A/covid-19/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Area, ResponsiveContainer, XAxis, YAxis, CartesianGrid, Tooltip, Legend, AreaChart } from 'recharts';\nimport styles from './Chart.module.css';\nimport { fetchDailyData } from '../../api';\n\nconst Chart = ({\n  data: {\n    confirmed,\n    recovered,\n    deaths\n  },\n  country\n}) => {\n  const [dailyData, setDailyData] = useState({});\n  useEffect(() => {\n    const fetchAPI = async () => {\n      const initialDailyData = await fetchDailyData();\n      setDailyData(initialDailyData);\n    };\n\n    fetchAPI();\n  }, []);\n\n  const yFormatter = num => {\n    return Math.abs(num) > 999 ? Math.sign(num) * (Math.abs(num) / 1000).toFixed(1) + 'k' : Math.sign(num) * Math.abs(num);\n  };\n\n  const formatDate = value => {\n    const months = {\n      \"01\": \"Jan\",\n      \"02\": \"Feb\",\n      \"03\": \"Mar\",\n      \"04\": \"Apr\",\n      \"05\": \"May\",\n      \"06\": \"Jun\",\n      \"07\": \"Jul\",\n      \"08\": \"Aug\",\n      \"09\": \"Sep\",\n      \"10\": \"Oct\",\n      \"11\": \"Nov\",\n      \"12\": \"Dec\"\n    };\n    const day = value.slice(8);\n    const month = months[value.slice(5, 7)];\n    return `${month} ${day}`;\n  };\n\n  const lineChart = dailyData[0] ? /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"99%\",\n    minHeight: 280,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AreaChart, {\n    data: dailyData,\n    margin: {\n      top: 5,\n      right: 20,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"defs\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"confirmed\",\n    x1: \"0\",\n    y1: \"0\",\n    x2: \"0\",\n    y2: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"5%\",\n    stopColor: \"#0000ff\",\n    stopOpacity: 0.8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"95%\",\n    stopColor: \"#0000ff\",\n    stopOpacity: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"deaths\",\n    x1: \"0\",\n    y1: \"0\",\n    x2: \"0\",\n    y2: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"5%\",\n    stopColor: \"#f64747\",\n    stopOpacity: 0.8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"95%\",\n    stopColor: \"#f64747\",\n    stopOpacity: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(CartesianGrid, {\n    horizontal: false,\n    vertical: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    tickLine: false,\n    stroke: \"#5d5d5d\",\n    tickFormatter: formatDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    tickLine: false,\n    stroke: \"#5d5d5d\",\n    tickFormatter: yFormatter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    contentStyle: {\n      background: \"#fefefe\"\n    },\n    formatter: (value, name, props) => {\n      return [value.toLocaleString(), name.charAt(0).toUpperCase() + name.slice(1)];\n    },\n    labelFormatter: formatDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    iconType: \"circle\",\n    formatter: value => {\n      return value.charAt(0).toUpperCase() + value.slice(1);\n    },\n    verticalAlign: \"top\",\n    align: \"right\",\n    height: 36,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Area, {\n    type: \"monotone\",\n    dataKey: \"confirmed\",\n    stroke: \"#0000ff\",\n    fillOpacity: 0.5,\n    fill: \"#0000ff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Area, {\n    type: \"monotone\",\n    dataKey: \"deaths\",\n    stroke: \"#f64747\",\n    fillOpacity: 0.5,\n    fill: \"#f64747\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }))) : null;\n  const lineChartcount = confirmed ? /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"99%\",\n    minHeight: 280,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AreaChart, {\n    data: [confirmed.value, recovered.value, deaths.value],\n    margin: {\n      top: 5,\n      right: 20,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"defs\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"confirmed\",\n    x1: \"0\",\n    y1: \"0\",\n    x2: \"0\",\n    y2: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"5%\",\n    stopColor: \"#0000ff\",\n    stopOpacity: 0.8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"95%\",\n    stopColor: \"#0000ff\",\n    stopOpacity: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"deaths\",\n    x1: \"0\",\n    y1: \"0\",\n    x2: \"0\",\n    y2: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"5%\",\n    stopColor: \"#f64747\",\n    stopOpacity: 0.8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"95%\",\n    stopColor: \"#f64747\",\n    stopOpacity: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(CartesianGrid, {\n    horizontal: false,\n    vertical: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    tickLine: false,\n    stroke: \"#5d5d5d\",\n    tickFormatter: formatDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    tickLine: false,\n    stroke: \"#5d5d5d\",\n    tickFormatter: yFormatter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    contentStyle: {\n      background: \"#fefefe\"\n    },\n    formatter: (value, name, props) => {\n      return [value.toLocaleString(), name.charAt(0).toUpperCase() + name.slice(1)];\n    },\n    labelFormatter: formatDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    iconType: \"circle\",\n    formatter: value => {\n      return value.charAt(0).toUpperCase() + value.slice(1);\n    },\n    verticalAlign: \"top\",\n    align: \"right\",\n    height: 36,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Area, {\n    type: \"monotone\",\n    dataKey: \"confirmed\",\n    stroke: \"#0000ff\",\n    fillOpacity: 0.5,\n    fill: \"#0000ff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Area, {\n    type: \"monotone\",\n    dataKey: \"deaths\",\n    stroke: \"#f64747\",\n    fillOpacity: 0.5,\n    fill: \"#f64747\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }))) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }, lineChart));\n};\n\nexport default Chart;","map":{"version":3,"sources":["/home/ayan/Code/Temp/A/covid-19/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","Area","ResponsiveContainer","XAxis","YAxis","CartesianGrid","Tooltip","Legend","AreaChart","styles","fetchDailyData","Chart","data","confirmed","recovered","deaths","country","dailyData","setDailyData","fetchAPI","initialDailyData","yFormatter","num","Math","abs","sign","toFixed","formatDate","value","months","day","slice","month","lineChart","top","right","left","bottom","background","name","props","toLocaleString","charAt","toUpperCase","lineChartcount","root","container"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Area, ResponsiveContainer, XAxis, YAxis, CartesianGrid, Tooltip, Legend, AreaChart  } from 'recharts';\nimport styles from './Chart.module.css';\nimport { fetchDailyData } from '../../api';\n\nconst Chart = ({data: {confirmed, recovered, deaths }, country}) => {\n\nconst [ dailyData, setDailyData ] = useState({});\n\nuseEffect(() => {\n    const fetchAPI = async () => {\n        const initialDailyData = await fetchDailyData();\n\n        setDailyData(initialDailyData);\n\n    }\n\nfetchAPI();\n}, []);\n\nconst yFormatter = (num) =>  {\n    return Math.abs(num) > 999 ? Math.sign(num)*((Math.abs(num)/1000).toFixed(1)) + 'k' : Math.sign(num)*Math.abs(num)\n}\n\nconst formatDate = (value) => {\n    const months = {\n      \"01\": \"Jan\",\n      \"02\": \"Feb\",\n      \"03\": \"Mar\",\n      \"04\": \"Apr\",\n      \"05\": \"May\",\n      \"06\": \"Jun\",\n      \"07\": \"Jul\",\n      \"08\": \"Aug\",\n      \"09\": \"Sep\",\n      \"10\": \"Oct\",\n      \"11\": \"Nov\",\n      \"12\": \"Dec\",\n    }\n    const day = value.slice(8)\n    const month = months[value.slice(5, 7)]\n\n    return `${month} ${day}`\n}\n\nconst lineChart = (\n    dailyData[0] ?\n    (\n    <ResponsiveContainer width='99%' minHeight={ 280 }>\n        <AreaChart\n            data={dailyData}\n            margin={{\n                top: 5,\n                right: 20,\n                left: 20,\n                bottom: 5,\n            }}\n        >\n            <defs>\n                <linearGradient id=\"confirmed\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#0000ff\" stopOpacity={0.8}/>\n                    <stop offset=\"95%\" stopColor=\"#0000ff\" stopOpacity={0}/>\n                </linearGradient>\n                <linearGradient id=\"deaths\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#f64747\" stopOpacity={0.8}/>\n                    <stop offset=\"95%\" stopColor=\"#f64747\" stopOpacity={0}/>\n                </linearGradient>\n            </defs>\n            <CartesianGrid horizontal={false} vertical={false} />\n            <XAxis\n                dataKey=\"date\"\n                tickLine={false}\n                stroke=\"#5d5d5d\"\n                tickFormatter={formatDate}\n            />\n            <YAxis\n                tickLine={false}\n                stroke=\"#5d5d5d\"\n                tickFormatter={yFormatter}\n            />\n            <Tooltip\n                contentStyle={{ background: \"#fefefe\" }}\n                formatter={(value, name, props) => {\n                return [\n                    value.toLocaleString(),\n                    name.charAt(0).toUpperCase() + name.slice(1),\n                ]\n                }}\n                labelFormatter={formatDate}\n            />\n            <Legend\n                iconType=\"circle\"\n                formatter={(value) => {\n                    return value.charAt(0).toUpperCase() + value.slice(1)\n                }}\n                verticalAlign=\"top\"\n                align='right'\n                height={36}\n            />\n            <Area\n                type=\"monotone\"\n                dataKey=\"confirmed\"\n                stroke=\"#0000ff\"\n                fillOpacity={0.5}\n                fill=\"#0000ff\"\n            />\n\n            <Area\n                type=\"monotone\"\n                dataKey=\"deaths\"\n                stroke=\"#f64747\"\n                fillOpacity={0.5}\n                fill=\"#f64747\"\n            />\n        </AreaChart>\n    </ResponsiveContainer>\n    ) : null\n);\n\nconst lineChartcount = (\n    confirmed ?\n    (\n    <ResponsiveContainer width='99%' minHeight={ 280 }>\n        <AreaChart\n            data={[confirmed.value,recovered.value,deaths.value]}\n            margin={{\n                top: 5,\n                right: 20,\n                left: 20,\n                bottom: 5,\n            }}\n        >\n            <defs>\n                <linearGradient id=\"confirmed\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#0000ff\" stopOpacity={0.8}/>\n                    <stop offset=\"95%\" stopColor=\"#0000ff\" stopOpacity={0}/>\n                </linearGradient>\n                <linearGradient id=\"deaths\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#f64747\" stopOpacity={0.8}/>\n                    <stop offset=\"95%\" stopColor=\"#f64747\" stopOpacity={0}/>\n                </linearGradient>\n            </defs>\n            <CartesianGrid horizontal={false} vertical={false} />\n            <XAxis\n                dataKey=\"date\"\n                tickLine={false}\n                stroke=\"#5d5d5d\"\n                tickFormatter={formatDate}\n            />\n            <YAxis\n                tickLine={false}\n                stroke=\"#5d5d5d\"\n                tickFormatter={yFormatter}\n            />\n            <Tooltip\n                contentStyle={{ background: \"#fefefe\" }}\n                formatter={(value, name, props) => {\n                return [\n                    value.toLocaleString(),\n                    name.charAt(0).toUpperCase() + name.slice(1),\n                ]\n                }}\n                labelFormatter={formatDate}\n            />\n            <Legend\n                iconType=\"circle\"\n                formatter={(value) => {\n                    return value.charAt(0).toUpperCase() + value.slice(1)\n                }}\n                verticalAlign=\"top\"\n                align='right'\n                height={36}\n            />\n            <Area\n                type=\"monotone\"\n                dataKey=\"confirmed\"\n                stroke=\"#0000ff\"\n                fillOpacity={0.5}\n                fill=\"#0000ff\"\n            />\n\n            <Area\n                type=\"monotone\"\n                dataKey=\"deaths\"\n                stroke=\"#f64747\"\n                fillOpacity={0.5}\n                fill=\"#f64747\"\n            />\n        </AreaChart>\n    </ResponsiveContainer>\n    ) : null\n);\n\n\nreturn(\n    <div className={styles.root}>\n        <div className={styles.container}>\n            {lineChart}\n        </div>\n    </div>\n)\n}\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}